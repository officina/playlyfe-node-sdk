// Generated by CoffeeScript 1.9.2
var Playlyfe, PlaylyfeException, Promise, _, request,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

request = require('request-promise');

Promise = require('bluebird');

_ = require('lodash');

PlaylyfeException = (function(superClass) {
  extend(PlaylyfeException, superClass);

  function PlaylyfeException(name, message, status, headers, errors) {
    this.name = name;
    this.message = message;
    this.status = status != null ? status : 500;
    this.headers = headers;
    if (errors != null) {
      this.errors = errors;
    }
    Error.call(this);
    Error.captureStackTrace(this, this.constructor);
    return;
  }

  PlaylyfeException.prototype.toJSON = function() {
    var error;
    error = {
      error: this.name,
      error_description: this.message
    };
    if (this.errors != null) {
      error.data = this.errors;
    }
    return error;
  };

  return PlaylyfeException;

})(Error);

Playlyfe = (function() {
  function Playlyfe(options) {
    var base, base1, base2;
    this.options = options;
    if (_.isUndefined(this.options)) {
      throw new Error('You must pass in options');
    }
    if (_.isUndefined(this.options.type)) {
      throw new Error('You must pass in type which can be code or client');
    }
    if (!_.contains(['code', 'client'], this.options.type)) {
      throw new Error('You must pass in type which can be code or client');
    }
    if (this.options.type === 'code' && _.isUndefined(this.options.redirect_uri)) {
      throw new Error('You must pass in a redirect_uri for authoriztion code flow');
    }
    if (_.isUndefined(this.options.version)) {
      throw new Error('You must pass in version of the API you would like to use which can be v1 or v2');
    }
    if ((base = this.options).strictSSL == null) {
      base.strictSSL = true;
    }
    if ((base1 = this.options).store == null) {
      base1.store = (function(_this) {
        return function(access_token) {
          _this.access_token = access_token;
          return Promise.resolve();
        };
      })(this);
    }
    if ((base2 = this.options).load == null) {
      base2.load = (function(_this) {
        return function() {
          return Promise.resolve(_this.access_token);
        };
      })(this);
    }
    this.endpoint = "https://api.playlyfe.com/" + this.options.version;
    return;
  }

  Playlyfe.prototype.getAuthorizationURI = function() {
    return "https://playlyfe.com/auth?" + (require("querystring").stringify({
      response_type: 'code',
      redirect_uri: this.options.redirect_uri,
      client_id: this.options.client_id
    }));
  };

  Playlyfe.prototype.makeRequest = function(method, url, query, body, full_response, cb) {
    var data;
    if (full_response == null) {
      full_response = false;
    }
    data = {
      url: url,
      method: method.toUpperCase(),
      qs: query,
      headers: {
        'content-type': 'application/json'
      },
      body: JSON.stringify(body),
      strictSSL: this.options.strictSSL,
      encoding: null,
      resolveWithFullResponse: true
    };
    return request(data).then(function(response) {
      var res_body;
      if (/application\/json/.test(response.headers['content-type'])) {
        res_body = JSON.parse(response.body.toString());
      } else {
        res_body = response.body;
      }
      if (full_response) {
        return Promise.resolve({
          headers: response.headers,
          status: response.statusCode,
          body: response.body
        });
      } else {
        return Promise.resolve(res_body);
      }
    })["catch"]((function(_this) {
      return function(err) {
        var res_body;
        if (/application\/json/.test(err.response.headers['content-type'])) {
          res_body = JSON.parse(err.response.body.toString());
          if (res_body.error === 'invalid_access_token') {
            return _this.getAccessToken().then(function() {
              return _this.api(method, url.replace(_this.endpoint, ''), query, body, full_response, cb);
            });
          } else {
            return Promise.reject(new PlaylyfeException(res_body.error, res_body.error_description, err.response.statusCode, err.response.headers, res_body.data));
          }
        } else {
          return Promise.reject(err);
        }
      };
    })(this));
  };

  Playlyfe.prototype.makeTokenRequest = function(body) {
    return this.makeRequest('POST', 'https://playlyfe.com/auth/token', {}, body).then((function(_this) {
      return function(token) {
        token.expires_at = new Date(new Date().getTime() + (parseInt(token.expires_in) * 1000));
        return _this.options.store(token).then(function() {
          return Promise.resolve(token);
        });
      };
    })(this));
  };

  Playlyfe.prototype.exchangeCode = function(code) {
    return this.getAccessToken(code);
  };

  Playlyfe.prototype.getAccessToken = function(code) {
    var body;
    body = {
      client_id: this.options.client_id,
      client_secret: this.options.client_secret,
      grant_type: 'client_credentials'
    };
    if (this.options.type === 'code') {
      return this.options.load().then((function(_this) {
        return function(token) {
          if (token != null) {
            body.grant_type = 'refresh_token';
            body.refresh_token = token.refresh_token;
            _this.makeTokenRequest(body);
          } else {
            body.grant_type = 'authorization_code';
            body.redirect_uri = _this.options.redirect_uri;
            body.code = code;
          }
          return _this.makeTokenRequest(body);
        };
      })(this));
    } else {
      return this.makeTokenRequest(body);
    }
  };

  Playlyfe.prototype.checkAccessToken = function(query) {
    if (this.options.player_id) {
      query.player_id = this.options.player_id;
    }
    return this.options.load().then((function(_this) {
      return function(token) {
        if (token == null) {
          if (_this.options.type === 'code') {
            return Promise.reject({
              error: "Initialize the Authorization Code Flow by exchanging the code"
            });
          } else {
            return _this.getAccessToken();
          }
        } else if (new Date() > new Date(token.expires_at)) {
          return _this.getAccessToken();
        } else {
          return Promise.resolve(token);
        }
      };
    })(this)).then((function(_this) {
      return function(token) {
        query.access_token = token.access_token;
        return Promise.resolve();
      };
    })(this));
  };

  Playlyfe.prototype.api = function(method, url, query, body, full_response, cb) {
    if (query == null) {
      query = {};
    }
    if (body == null) {
      body = {};
    }
    if (full_response == null) {
      full_response = false;
    }
    if (cb == null) {
      cb = null;
    }
    return this.checkAccessToken(query).then((function(_this) {
      return function() {
        if (cb != null) {
          return _this.makeRequest(method, "" + _this.endpoint + url, query, body, full_response, cb).nodeify(cb);
        } else {
          return _this.makeRequest(method, "" + _this.endpoint + url, query, body, full_response);
        }
      };
    })(this));
  };

  Playlyfe.prototype.get = function(url, query, full_response, cb) {
    return this.api('GET', url, query, null, full_response, cb);
  };

  Playlyfe.prototype.post = function(url, query, body, full_response, cb) {
    return this.api('POST', url, query, body, full_response, cb);
  };

  Playlyfe.prototype.patch = function(url, query, body, full_response, cb) {
    return this.api('PATCH', url, query, body, full_response, cb);
  };

  Playlyfe.prototype.put = function(url, query, body, full_response, cb) {
    return this.api('PUT', url, query, body, full_response, cb);
  };

  Playlyfe.prototype["delete"] = function(url, query, full_response, cb) {
    return this.api('DELETE', url, query, null, full_response, cb);
  };

  return Playlyfe;

})();

module.exports = {
  Playlyfe: Playlyfe,
  PlaylyfeException: PlaylyfeException
};
