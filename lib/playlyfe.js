// Generated by CoffeeScript 1.9.2
var Playlyfe, Promise, _, request;

request = require('request-promise');

Promise = require('bluebird');

_ = require('lodash');

Playlyfe = (function() {
  function Playlyfe(options) {
    var base, base1, base2;
    this.options = options;
    if (_.isUndefined(this.options)) {
      throw new Error('You must pass in options');
    }
    if (_.isUndefined(this.options.type)) {
      throw new Error('You must pass in type which can be code or client');
    }
    if (!_.contains(['code', 'client'], this.options.type)) {
      throw new Error('You must pass in type which can be code or client');
    }
    if (this.options.type === 'code') {
      if (_.isUndefined(this.options.redirect_uri)) {
        throw new Error('You must pass in a redirect_uri for authoriztion code flow');
      }
    }
    if (_.isUndefined(this.options.version)) {
      throw new Error('You must pass in version of the API you would like to use which can be v1 or v2');
    }
    this.code = null;
    this.refresh_token = null;
    if ((base = this.options).strictSSL == null) {
      base.strictSSL = true;
    }
    if ((base1 = this.options).store == null) {
      base1.store = (function(_this) {
        return function(access_token) {
          _this.access_token = access_token;
          return Promise.resolve();
        };
      })(this);
    }
    if ((base2 = this.options).load == null) {
      base2.load = (function(_this) {
        return function() {
          return Promise.resolve(_this.access_token);
        };
      })(this);
    }
    return;
  }

  Playlyfe.prototype.getAuthorizationURI = function() {
    return "https://playlyfe.com/auth?" + (require("querystring").stringify({
      response_type: 'code',
      redirect_uri: this.options.redirect_uri,
      client_id: this.options.client_id
    }));
  };

  Playlyfe.prototype.makeRequest = function(url, method, query, body, raw) {
    if (raw == null) {
      raw = false;
    }
    return request({
      url: url,
      method: method.toUpperCase(),
      qs: query,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body),
      strictSSL: this.options.strictSSL,
      encoding: 'utf8',
      json: !raw
    })["catch"](function(err) {
      var ref;
      if (typeof ((ref = err.response) != null ? ref.body : void 0) === 'object') {
        return Promise.reject(err.response.body);
      } else {
        return Promise.reject(err);
      }
    });
  };

  Playlyfe.prototype.makeTokenRequest = function(body) {
    return this.makeRequest('https://playlyfe.com/auth/token', 'POST', {}, body).then((function(_this) {
      return function(token) {
        token.expires_at = new Date(new Date().getTime() + (parseInt(token.expires_in) * 1000));
        return _this.options.store(token).then(function() {
          return Promise.resolve(token);
        });
      };
    })(this));
  };

  Playlyfe.prototype.getAccessToken = function(code) {
    var body;
    body = {
      client_id: this.options.client_id,
      client_secret: this.options.client_secret,
      grant_type: 'client_credentials'
    };
    if (this.options.type === 'code') {
      body.grant_type = 'authorization_code';
      body.redirect_uri = this.options.redirect_uri;
      if (code != null) {
        body.code = code;
        return this.makeTokenRequest(body);
      } else {
        body.grant_type = 'refresh_token';
        return this.options.load().then((function(_this) {
          return function(token) {
            body.refresh_token = token.refresh_token;
            return _this.makeTokenRequest(body);
          };
        })(this));
      }
    } else {
      return this.makeTokenRequest(body);
    }
  };

  Playlyfe.prototype.api = function(method, url, query, body, raw, cb) {
    if (query == null) {
      query = {};
    }
    if (body == null) {
      body = {};
    }
    if (raw == null) {
      raw = false;
    }
    if (cb == null) {
      cb = null;
    }
    if (this.options.player_id) {
      query.player_id = this.options.player_id;
    }
    return this.options.load().then((function(_this) {
      return function(token) {
        if (token == null) {
          return _this.getAccessToken();
        } else if (new Date() > new Date(token.expires_at)) {
          return _this.getAccessToken();
        } else {
          return Promise.resolve(token);
        }
      };
    })(this)).then((function(_this) {
      return function(token) {
        query.access_token = token.access_token;
        if (cb != null) {
          return _this.makeRequest("https://api.playlyfe.com/" + _this.options.version + url, method, query, body, raw).nodeify(cb);
        } else {
          return _this.makeRequest("https://api.playlyfe.com/" + _this.options.version + url, method, query, body, raw);
        }
      };
    })(this));
  };

  Playlyfe.prototype.get = function(url, query, raw, cb) {
    return this.api('GET', url, query, {}, raw, cb);
  };

  Playlyfe.prototype.post = function(url, query, body, cb) {
    return this.api('POST', url, query, body, false, cb);
  };

  Playlyfe.prototype.patch = function(url, query, body, cb) {
    return this.api('PATCH', url, query, body, false, cb);
  };

  Playlyfe.prototype.put = function(url, query, body, cb) {
    return this.api('PUT', url, query, body, false, cb);
  };

  Playlyfe.prototype["delete"] = function(url, query, cb) {
    return this.api('DELETE', url, query, {}, false, cb);
  };

  return Playlyfe;

})();

module.exports = Playlyfe;
